
R version 3.0.1 Patched (2013-07-24 r63403) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Testing for internet connectivity, the connection to the MODIS SOAP WSDL Server and it's Web Service
> # Description Language, for the XML response from the Web Service method, and for the functions of
> # MODISTools.
> 
> # Load data to be used for testing.
> library(MODISTools)
> data(SubsetExample, FindIDExample, QualityCheckExample, TransectExample, 
+      EndCoordinatesExample, ConvertExample)
> library(RCurl)  # Will use some RCurl and XML functions explicitly in testing.
Loading required package: bitops
> library(XML)
> 
> ## Following lines of code testing for internet connectivity and server access, are from
> ## R testing: .../tests/internet.R
> # Check for internet capability.
> if(!capabilities("http/ftp")) q()
> 
> # Check for internet connectivity.
> if(.Platform$OS.type == "unix" && is.null(nsl("cran.r-project.org"))) q()
> 
> # Check we can reach the server for lpdaac modis web service.
> if(.Platform$OS.type == "unix" && is.null(nsl("daac.ornl.gov"))) q()
> ##
> 
> urlCheck<- try(curlPerform(url="http://daac.ornl.gov/cgi-bin/MODIS/GLBVIZ_1_Glb_subset/MODIS_webservice.pl"))
> if(class(urlCheck) == "try-error") q()
> 
> # Check the XML response is as expected.
> getsubset.xml <- paste('
+     <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mod="http://daac.ornl.gov/MODIS_webservice">
+                         <soapenv:Header/>
+                         <soapenv:Body>
+                         <mod:getsubset soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
+                         <Latitude xsi:type="xsd:float">', 51.41363, '</Latitude>
+                         <Longitude xsi:type="xsd:float">', -0.64875, '</Longitude>
+                         <Product xsi:type="xsd:string">', "MOD13Q1", '</Product>
+                         <Band xsi:type="xsd:string">', "250m_16_days_EVI", '</Band>
+                         <MODIS_Subset_Start_Date xsi:type="xsd:string">', "A2001001", '</MODIS_Subset_Start_Date>
+                         <MODIS_Subset_End_Date xsi:type="xsd:string">', "A2001025", '</MODIS_Subset_End_Date>
+                         <Km_Above_Below xsi:type="xsd:string">', 0, '</Km_Above_Below>
+                         <Km_Left_Right xsi:type="xsd:string">', 0, '</Km_Left_Right>
+                         </mod:getsubset>
+                         </soapenv:Body>
+                         </soapenv:Envelope>',
+                       sep="")
> 
> header.fields <- c(Accept = "text/xml",
+                     Accept = "multipart/*",
+                    'Content-Type' = "text/xml; charset=utf-8",
+                     SOAPAction="")
> 
> reader <- basicTextGatherer()
> header <- basicTextGatherer()
> curlPerform(url = "http://daac.ornl.gov/cgi-bin/MODIS/GLBVIZ_1_Glb_subset/MODIS_webservice.pl",
+           httpheader = header.fields,
+           postfields = getsubset.xml,
+           writefunction = reader$update,
+           verbose=FALSE)
OK 
 0 
> 
> xmlRoot(xmlTreeParse(reader$value()))
<soap:Envelope encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tns1="http://daac.ornl.gov/MODIS_webservice">
 <soap:Body>
  <getsubsetResponse xmlns="http://daac.ornl.gov/MODIS_webservice">
   <tns1:getsubsetReturn type="tns1:ModisData" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">
    <xllcorner type="xsd:float">-45172.97</xllcorner>
    <yllcorner type="xsd:float">5716815.61</yllcorner>
    <cellsize type="xsd:float">231.656358264</cellsize>
    <nrows type="xsd:float">1</nrows>
    <ncols type="xsd:float">1</ncols>
    <band type="xsd:string">250m_16_days_EVI</band>
    <units type="xsd:string">EVI ratio - No units</units>
    <scale type="xsd:float">0.0001</scale>
    <latitude type="xsd:float">51.41363</latitude>
    <longitude type="xsd:float">-0.64875</longitude>
    <header type="xsd:string">HDFname,Product,Date,Location,Processed_Date,Subset_Data...</header>
    <subset arrayType="xsd:string[2]" type="soapenc:Array">
     <item type="xsd:string">MOD13Q1.A2001001.h17v03.005.2008270025219.250m_16_days_EVI,MOD13Q1,A2001001,Lat51.41363Lon-0.64875Samp1Line1,2008270025219,2861</item>
     <item type="xsd:string">MOD13Q1.A2001017.h17v03.005.2006357020259.250m_16_days_EVI,MOD13Q1,A2001017,Lat51.41363Lon-0.64875Samp1Line1,2006357020259,2944</item>
    </subset>
   </tns1:getsubsetReturn>
  </getsubsetResponse>
 </soap:Body>
</soap:Envelope>
> ###
> 
> # Check FindID example
> FindID(ID=SubsetExample, Data=FindIDExample)
[1] 1
> 
> # Check QualityCheck example
> EVIdata <- QualityCheckExample[1:5, ]
> QAdata <- QualityCheckExample[6:10, ]
> 
> QualityCheck(Data=EVIdata, Product="MOD13Q1", Band="250m_16_days_EVI", NoDataFill=-3000, 
+           QualityBand="250m_16_days_pixel_reliability", QualityScores=QAdata, QualityThreshold=0)
  pixel.1 pixel.2 pixel.3 pixel.4 pixel.5
1    4410    4410    4835    5307    4774
2    4024    4194    4035    3124    4670
3      NA      NA      NA      NA      NA
4    3892    3890    4251    3248    3248
5    4649    4038    3988    3986    4184
> ###
> 
> # Check we can still reach the server for lpdaac modis web service before running functions that request.
> if(.Platform$OS.type == "unix" && is.null(nsl("daac.ornl.gov"))) q()
> # Check MODIS subset uses this output to produce correctly downloaded files.
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MCD12Q1", 
+                    Band="Land_Cover_Type_1", StartDate="A2005001", EndDate="A2005001", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else {
+   # Check GetSubset is producing the correct output.
+   # Use GetProducts, GetBands, and GetDates, to specify the GetSubset request.
+   Product <- GetProducts()[1]
+   Band <- GetBands(Product)[1]
+   Dates <- GetDates(SubsetExample$lat, SubsetExample$long, Product)[1:2]
+   
+   GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product=Product, Band=Band, 
+             StartDate=Dates[1], EndDate=Dates[1], KmAboveBelow=0, KmLeftRight=0)
+   
+   MODISSubsets(LoadDat=SubsetExample, Product="MCD12Q1",
+                Bands=c("Land_Cover_Type_1"),
+                Size=c(1,1), StartDate=TRUE)
+ }
[1] "Found 1 unique time-series to download."
[1] "Getting subset for location 1 of 1..."
[1] "Full subset download complete. Writing the subset download file..."
[1] "Done! Check the subset download file for correct subset information and any download messages."
> 
> # Check we can still reach the server for lpdaac modis web service before running functions that request.
> if(.Platform$OS.type == "unix" && is.null(nsl("daac.ornl.gov"))) q()
> # Check example run of MODISSummaries.
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else {
+   MODISSummaries(LoadDat=SubsetExample, Product="MCD12Q1", Band="Land_Cover_Type_1", 
+                  ValidRange=c(0,254), NoDataFill=255, ScaleFactor=1, StartDate=TRUE)
+ }
[1] "Processing file 1 of 1..."
[1] "Writing summaries and collecting data..."
[1] "Done! Check the 'MODIS Summary' and 'MODIS Data' output files."
> 
> # Check the MODISSummaries file outputs are consistent.
> SummaryFile <- read.csv(list.files(pattern="MODIS Summary"))
> DataFile <- read.csv(list.files(pattern="MODIS Data"))
> all(SummaryFile$mean.band == DataFile[1,which(grepl("band.pixels", names(DataFile)))])
[1] TRUE
> 
> # Check we can still reach the server for lpdaac modis web service before running functions that request.
> if(.Platform$OS.type == "unix" && is.null(nsl("daac.ornl.gov"))) q()
> # Check example of MODISTransects
> if(grepl("Server is busy handling other requests", 
+          GetSubset(Lat=SubsetExample$lat, Long=SubsetExample$long, Product="MOD13Q1", 
+                    Band="250m_16_days_EVI", StartDate="A2000049", EndDate="A2000049", 
+                    KmAboveBelow=0, KmLeftRight=0)$subset[1])
+ ){
+   q()
+ } else {
+   MODISTransects(LoadData=TransectExample, Product="MCD12Q1",     
+           Bands=c("Land_Cover_Type_1"), 
+           Size=c(0,0), StartDate=TRUE)
+ }
[1] "Found 1 transects. Downloading time-series sets for each transect..."
[1] "Found 2 unique time-series to download."
[1] "Getting subset for location 1 of 2..."
[1] "Getting subset for location 2 of 2..."
[1] "Full subset download complete. Writing the subset download file..."
> 
> # Check EndCoordinates example
> EndCoordinates(LoadDat=EndCoordinatesExample, Distance=2000, Angle=90, AngleUnits="degrees")
> 
> # Check ConvertToDD example
> ConvertToDD(XY=ConvertExample, LatColName="lat", LongColName="long")
       DD.lat    DD.long
[1,] 51.40177 -0.6336333
[2,] 51.41537 -0.6462000
[3,] 51.40177 -0.6444000
[4,] 51.41287 -0.6340500
[5,] 51.41420 -0.6488939
[6,] 51.41053 -0.6421589
[7,] 51.41170 -0.6382400
[8,] 51.41327 -0.6450119
> 
> # Check ExtractTile example
> TileExample <- read.csv(list.files(pattern="MODIS Data"))
> TileExample <- TileExample[ ,which(grepl("band.pixels", names(TileExample)))]
> 
> dim(TileExample)
[1]  1 25
> dim(ExtractTile(Data=TileExample, Rows=c(5,1), Cols=c(5,1), Grid=FALSE))
[1] 1 9
> ExtractTile(Data=TileExample, Rows=c(5,1), Cols=c(5,1), Grid=FALSE)
     [,1] [,2] [,3] [,4]     [,5] [,6] [,7] [,8] [,9]
[1,]    5    5    5    5 4.250343   14   14    5   14
> 
> matrix(TileExample, nrow=5, ncol=5, byrow=TRUE)
     [,1]     [,2]     [,3]     [,4] [,5]    
[1,] 14       7.253086 11.74691 14   6.503429
[2,] 14       5        5        14   5       
[3,] 11.49657 5        4.250343 5    5       
[4,] 14       5        14       14   11.49657
[5,] 4.749657 5        5        5    13      
> ExtractTile(Data=TileExample, Rows=c(5,1), Cols=c(5,1), Grid=TRUE)
, , 1

     [,1]      [,2] [,3]
[1,]    5  5.000000   14
[2,]    5  4.250343    5
[3,]    5 14.000000   14

> 
> # Check LandCover on previously downloaded data from MODISSubsets
> LandCover(Band="Land_Cover_Type_1")
[1] "Processing file 1 of 3..."
[1] "Processing file 2 of 3..."
[1] "Processing file 3 of 3..."
[1] "Done! Check the 'MODIS Land Cover Summary' output file."
> 
> proc.time()
   user  system elapsed 
  4.107   0.119  42.871 
